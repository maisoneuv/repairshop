services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 10

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    working_dir: /app
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn --workers 3 --bind 0.0.0.0:8000 app.wsgi:application
      "
    expose:
      - "8000"
    volumes:
      - staticfiles:/app/staticfiles

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    # output will be copied into nginx via a volume below
    # so no need to expose ports

  nginx:
    image: nginx:alpine
    depends_on:
      - web
      - frontend
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/var/www/frontend:ro
      - staticfiles:/app/staticfiles:ro
      - ./docker/disable-default.conf:/etc/nginx/conf.d/default.conf:ro 
    ports:
      - "8008:80"

volumes:
  dbdata:
  frontend_dist:
  staticfiles:
